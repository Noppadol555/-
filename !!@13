# ===============================================
# IntelligentResourceManager (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á GlobalConfig ‡∏™‡∏î)
# ===============================================
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ (‡∏£‡∏±‡∏ô‡πÉ‡∏ô terminal ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
# pip install psutil asyncio numpy

import asyncio
import psutil
import numpy as np
from collections import deque
import logging
from config import GlobalConfig

# ---------------- Logging ----------------
log_level_str = GlobalConfig.get('log_level', 'INFO').upper()
log_level = getattr(logging, log_level_str, logging.INFO)
logging.basicConfig(
    level=log_level,
    format="%(asctime)s - %(levelname)s - %(message)s"
)


class IntelligentResourceManager:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏£‡∏∞‡∏ö‡∏ö (CPU, RAM) ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå"""

    def __init__(self):
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CPU/RAM ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        self.cpu_usage = deque(maxlen=60)
        self.ram_usage = deque(maxlen=60)

        # Batch size ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏°‡πÄ‡∏î‡∏•
        self.model_batch_sizes = {
            'qnt': 32, 'ddpg': 32, 'ssd': 32, 'evogan': 32,
            'tft': 32, 'gnn': 32, 'madrl': 32, 'meta': 32
        }

        # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö multitask)
        self.task_priorities = {'train': 0.7, 'predict': 0.2, 'data_fetch': 0.1}

        # Lock ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤
        self.resource_lock = asyncio.Lock()

        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å GlobalConfig
        self.auto_bug_fix = GlobalConfig.get('auto_bug_fix', True)
        self.bug_fix_attempts = GlobalConfig.get('bug_fix_attempts', 5)
        self.resource_adaptive = GlobalConfig.get('resource_adaptive', True)
        self.min_ram_reserve_mb = GlobalConfig.get('min_ram_reserve_mb', 1024)
        self.min_cpu_idle_percent = GlobalConfig.get('min_cpu_idle_percent', 20)

        logging.info("‚úÖ IntelligentResourceManager initialized (config synced).")

    async def monitor_resources(self):
        """‡πÄ‡∏ù‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CPU/RAM ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏° GlobalConfig"""
        process = psutil.Process()

        while GlobalConfig.get('system_running', True):
            try:
                # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                self.cpu_usage.append(process.cpu_percent(interval=1))
                self.ram_usage.append(process.memory_info().rss / (1024 * 1024))

                # ‚úÖ sync ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å GlobalConfig ‡∏ó‡∏∏‡∏Å loop (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö dynamic update)
                self.auto_bug_fix = GlobalConfig.get('auto_bug_fix', self.auto_bug_fix)
                self.bug_fix_attempts = GlobalConfig.get('bug_fix_attempts', self.bug_fix_attempts)
                self.resource_adaptive = GlobalConfig.get('resource_adaptive', self.resource_adaptive)
                self.min_ram_reserve_mb = GlobalConfig.get('min_ram_reserve_mb', self.min_ram_reserve_mb)
                self.min_cpu_idle_percent = GlobalConfig.get('min_cpu_idle_percent', self.min_cpu_idle_percent)

                # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î adaptive ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
                if self.resource_adaptive:
                    await self.adjust_resources()

                await asyncio.sleep(60)

            except Exception as e:
                logging.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô monitor_resources(): {e}")
                if self.auto_bug_fix:
                    await self._attempt_fix("monitor_resources", e)
                else:
                    raise e

    async def adjust_resources(self, trader=None):
        """‡∏õ‡∏£‡∏±‡∏ö batch size ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CPU/RAM"""
        async with self.resource_lock:
            try:
                avg_cpu = np.mean(self.cpu_usage) if self.cpu_usage else 50
                avg_ram = np.mean(self.ram_usage) if self.ram_usage else 1024
                total_ram = psutil.virtual_memory().total / (1024 * 1024)
                ram_threshold = total_ram - self.min_ram_reserve_mb

                # üîª ‡∏•‡∏î batch size ‡∏ñ‡πâ‡∏≤ CPU ‡∏´‡∏£‡∏∑‡∏≠ RAM ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô
                if avg_cpu > (100 - self.min_cpu_idle_percent) or avg_ram > ram_threshold:
                    for model in self.model_batch_sizes:
                        self.model_batch_sizes[model] = max(1, int(self.model_batch_sizes[model] * 0.8))
                    logging.warning(
                        f"‚öôÔ∏è ‡∏•‡∏î batch size ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å CPU={avg_cpu:.1f}%, RAM={avg_ram:.1f}MB "
                        f"(threshold={ram_threshold:.0f}MB)"
                    )

                # üî∫ ‡πÄ‡∏û‡∏¥‡πà‡∏° batch size ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏¢‡∏≠‡∏∞
                elif avg_cpu < 50 and avg_ram < (total_ram * 0.5):
                    for model in self.model_batch_sizes:
                        self.model_batch_sizes[model] = min(128, int(self.model_batch_sizes[model] * 1.2))
                    logging.info(
                        f"‚¨ÜÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° batch size ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å CPU={avg_cpu:.1f}%, RAM={avg_ram:.1f}MB"
                    )

                # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ trader ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                if trader and hasattr(trader, "resource_manager"):
                    trader.resource_manager.model_batch_sizes = self.model_batch_sizes

            except Exception as e:
                logging.error(f"‚ö†Ô∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                if self.auto_bug_fix:
                    await self._attempt_fix("adjust_resources", e)
                else:
                    raise e

    async def _attempt_fix(self, context: str, error: Exception):
        """‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡πä‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ bug_fix_attempts)"""
        for attempt in range(1, self.bug_fix_attempts + 1):
            try:
                logging.warning(f"üõ†Ô∏è [Attempt {attempt}/{self.bug_fix_attempts}] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡πä‡∏Å‡πÉ‡∏ô {context}: {error}")
                await asyncio.sleep(3)
                if context == "monitor_resources":
                    self.cpu_usage.clear()
                    self.ram_usage.clear()
                elif context == "adjust_resources":
                    for m in self.model_batch_sizes:
                        self.model_batch_sizes[m] = 32
                logging.info("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡πä‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
                return
            except Exception as e:
                logging.error(f"‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏±‡πä‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô {context}: {e}")
        logging.critical(f"üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡∏ö‡∏±‡πä‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á {self.bug_fix_attempts} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á: {context}")

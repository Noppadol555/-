    async def _handle_message(self, data, websocket):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å public stream (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î, ticker ‡∏Ø‡∏•‡∏Ø)"""
        try:
            if "data" in data and isinstance(data["data"], dict):
                msg = data["data"]
                symbol = msg.get("s")
                if symbol:
                    price = float(msg.get("c", 0))
                    volume = float(msg.get("v", 0))
                    self.data[symbol] = {
                        "timestamp": time.time(),
                        "close": price,
                        "volume": volume
                    }
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite
                    self.db_conn.execute(
                        "INSERT INTO ws_data (symbol, timestamp, close, volume, funding_rate, depth) VALUES (?, ?, ?, ?, ?, ?)",
                        (symbol, time.time(), price, volume, 0, 0)
                    )
                    self.db_conn.commit()
                    logging.info(f"üìà {symbol} = {price:.2f} | Vol={volume:.2f}")
        except Exception as e:
            logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô _handle_message: {e}")

    async def _handle_user_data(self, data):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å user stream (balance, position, order update)"""
        try:
            event_type = data.get("e")
            if event_type == "ACCOUNT_UPDATE":
                balances = data["a"]["B"]
                for b in balances:
                    if b["a"] == "USDT":
                        self.balance_data["free"] = float(b["wb"])
                        self.balance_data["locked"] = float(b["cw"])
                        logging.info(f"üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: free={b['wb']}, locked={b['cw']}")
            elif event_type == "ORDER_TRADE_UPDATE":
                symbol = data["o"]["s"]
                status = data["o"]["X"]
                price = data["o"]["p"]
                side = data["o"]["S"]
                logging.info(f"üìä ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå {symbol} {side} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {status} ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ {price}")
        except Exception as e:
            logging.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô _handle_user_data: {e}")

# ===============================================
# KPIOptimizer Class (Auto Sync with GlobalConfig)
# ===============================================
# ✅ ทำงานร่วมกับ GlobalConfig ได้แบบเรียลไทม์
# ✅ ตรวจสอบ target_kpi_daily / min_daily_kpi / bayes_opt_steps / max_drawdown
# ✅ ปรับค่าอัตโนมัติและแสดง log เมื่อมีการอัพเดทจาก GlobalConfig
# ===============================================

import logging
from config import GlobalConfig

# ---------------- Logging ----------------
log_level_str = GlobalConfig.get('log_level', 'INFO').upper()
log_level = getattr(logging, log_level_str, logging.INFO)
logging.basicConfig(
    level=log_level,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("kpi_optimizer.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

class KPIOptimizer:
    """จัดการและปรับกลยุทธ์ KPI ของระบบเทรดให้สอดคล้องกับ GlobalConfig"""

    def __init__(self):
        # ✅ โหลดค่าจาก GlobalConfig ครั้งแรก
        self.update_from_global_config()
        logging.info("🔄 KPIOptimizer initialized with current GlobalConfig values")

    # -------------------------------------------------
    def update_from_global_config(self):
        """โหลดค่าทั้งหมดจาก GlobalConfig แบบเรียลไทม์"""
        self.target_kpi = GlobalConfig.get('target_kpi_daily', 100000.0)
        self.min_kpi = GlobalConfig.get('min_daily_kpi', 50000.0)
        self.bayes_opt_steps = GlobalConfig.get('bayes_opt_steps', 10)
        self.max_drawdown = GlobalConfig.get('max_drawdown', 1.0)
        logging.info(f"✅ Synced KPIOptimizer → target_kpi={self.target_kpi}, "
                     f"min_kpi={self.min_kpi}, bayes_opt_steps={self.bayes_opt_steps}, "
                     f"max_drawdown={self.max_drawdown}")

    # -------------------------------------------------
    def optimize(self, current_kpi: float) -> float:
        """
        ปรับค่า factor ของ KPI ตามผลการทำกำไรปัจจุบัน
        :param current_kpi: กำไรปัจจุบัน (USDT)
        :return: ค่า factor สำหรับปรับกลยุทธ์
        """
        # ✅ อัปเดตค่าจาก GlobalConfig ก่อนคำนวณทุกครั้ง (ซิงค์สด)
        self.update_from_global_config()

        if current_kpi >= self.target_kpi:
            kpi_factor = min(2.0, current_kpi / self.target_kpi)
            logging.info(f"🎯 KPI OK: current={current_kpi:.2f} ≥ target={self.target_kpi:.2f} "
                         f"→ factor={kpi_factor:.2f}")
        elif current_kpi < self.min_kpi:
            kpi_factor = max(0.5, current_kpi / self.min_kpi)
            logging.warning(f"⚠️ KPI Low: current={current_kpi:.2f} < min={self.min_kpi:.2f} "
                            f"→ factor={kpi_factor:.2f}")
        else:
            kpi_factor = 1.0
            logging.info(f"ℹ️ KPI Stable: current={current_kpi:.2f}, factor={kpi_factor:.2f}")

        return kpi_factor

    # -------------------------------------------------
    def adjust_strategy(self, strategy_params: dict, current_kpi: float) -> dict:
        """
        ปรับค่ากลยุทธ์ (เช่น learning rate, risk factor) ตาม KPI factor
        :param strategy_params: dict ของพารามิเตอร์กลยุทธ์เดิม
        :param current_kpi: กำไรปัจจุบัน
        :return: พารามิเตอร์กลยุทธ์ใหม่ที่ปรับแล้ว
        """
        kpi_factor = self.optimize(current_kpi)
        new_params = strategy_params.copy()
        # ✅ ปรับพารามิเตอร์สำคัญตาม KPI factor
        new_params['learning_rate'] = strategy_params.get('learning_rate', 0.001) * kpi_factor
        new_params['risk_factor'] = min(
            1.0, strategy_params.get('risk_factor', 1.0) * kpi_factor
        )

        logging.info(f"🧮 Strategy adjusted → lr={new_params['learning_rate']:.6f}, "
                     f"risk_factor={new_params['risk_factor']:.3f}, factor={kpi_factor:.2f}")
        return new_params

    # -------------------------------------------------
    def check_drawdown_limit(self, current_drawdown: float) -> bool:
        """
        ตรวจสอบว่าการขาดทุนรวมเกิน max_drawdown หรือไม่
        :param current_drawdown: ค่า drawdown ปัจจุบัน (fraction เช่น 0.25 = 25%)
        :return: True = ปลอดภัย, False = เกิน limit
        """
        self.update_from_global_config()
        if current_drawdown > self.max_drawdown:
            logging.error(f"🚨 Drawdown exceeded: {current_drawdown:.2f} > limit={self.max_drawdown:.2f}")
            return False
        else:
            logging.info(f"✅ Drawdown OK: {current_drawdown:.2f} ≤ limit={self.max_drawdown:.2f}")
            return True

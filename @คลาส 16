# ==========================================================
# StrategyGenerator (Enhanced Version - Full Futures Mode)
# ==========================================================
# ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö HOLD, LONG, SHORT, CLOSE_LONG, CLOSE_SHORT ‡∏Ñ‡∏£‡∏ö
# ‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£ integrate ‡∏Å‡∏±‡∏ö main.py / env / trader
# ‚úÖ ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
# ==========================================================

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ (‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô terminal ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
# pip install numpy

import numpy as np
import logging
from config import GlobalConfig  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ

class StrategyGenerator:
    def __init__(self, trader, env, risk_guardian):
        self.trader = trader
        self.env = env
        self.risk_guardian = risk_guardian

        # ‚úÖ Action map ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ Futures
        # 0 = HOLD       ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏£‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞
        # 1 = LONG       ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡∏ù‡∏±‡πà‡∏á Long (‡∏ã‡∏∑‡πâ‡∏≠)
        # 2 = SHORT      ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡∏ù‡∏±‡πà‡∏á Short (‡∏Ç‡∏≤‡∏¢)
        # 3 = CLOSE_LONG ‚Üí ‡∏õ‡∏¥‡∏î‡∏ù‡∏±‡πà‡∏á Long (‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏Å)
        # 4 = CLOSE_SHORT‚Üí ‡∏õ‡∏¥‡∏î‡∏ù‡∏±‡πà‡∏á Short (‡∏ã‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏±‡∏ö)
        self.action_map = {
            0: 'HOLD',
            1: 'LONG',
            2: 'SHORT',
            3: 'CLOSE_LONG',
            4: 'CLOSE_SHORT',
        }

    # ==========================================================
    # üîπ generate_strategy()
    # ==========================================================
    async def generate_strategy(self, state, symbol, volatility):
        """
        ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ action ‡πÅ‡∏•‡∏∞ continuous output (‡πÄ‡∏ä‡πà‡∏ô leverage, size)
        ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏•‡∏≤‡∏î Futures
        """
        # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ action ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
        discrete_pred, continuous_pred = self.trader.predict(state)
        action_idx = int(np.argmax(discrete_pred[0]))
        action = self.action_map.get(action_idx, 'HOLD')

        leverage, size = continuous_pred[0]

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á (side)
        if action in ['LONG']:
            side = 'LONG'
        elif action in ['SHORT']:
            side = 'SHORT'
        elif action in ['CLOSE_LONG']:
            side = 'CLOSE_LONG'
        elif action in ['CLOSE_SHORT']:
            side = 'CLOSE_SHORT'
        else:
            side = 'FLAT'

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Stop Loss / Take Profit ‡∏ï‡∏≤‡∏° volatility
        stop_loss = GlobalConfig.get('stop_loss_percentage') * (
            1 + volatility / max(GlobalConfig.get('min_volatility_threshold'), 1e-8)
        )
        take_profit = stop_loss * 2

        # ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å key
        return {
            'action': action,
            'side': side,
            'symbol': symbol,
            'size': float(size),
            'leverage': min(
                float(leverage),
                GlobalConfig.get('max_leverage_per_symbol', {}).get(symbol, 125)
            ),
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'trailing_stop': (
                stop_loss if volatility > GlobalConfig.get('min_volatility_threshold') else None
            ),
            'trailing_take_profit': (
                take_profit if volatility > GlobalConfig.get('min_volatility_threshold') else None
            ),
        }

    # ==========================================================
    # üîπ execute_strategy()
    # ==========================================================
    async def execute_strategy(self, strategy):
        """
        ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:
        HOLD ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°
        LONG ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î Long
        SHORT ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î Short
        CLOSE_LONG / CLOSE_SHORT ‚Üí ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°
        """
        # ‚úÖ HOLD ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô Risk Check ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        if strategy['action'] == 'HOLD' or not self.risk_guardian.assess_risk(
            self.env.account_balance, self.env.initial_balance
        ):
            return 0

        # ‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Futures
        #   LONG        ‚Üí BUY
        #   SHORT       ‚Üí SELL
        #   CLOSE_LONG  ‚Üí SELL
        #   CLOSE_SHORT ‚Üí BUY
        if strategy['action'] in ['LONG', 'CLOSE_SHORT']:
            order_side = 'BUY'
        elif strategy['action'] in ['SHORT', 'CLOSE_LONG']:
            order_side = 'SELL'
        else:
            order_side = 'HOLD'

        # ‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ú‡πà‡∏≤‡∏ô Environment
        profit = await self.env.execute_trade_async(
            strategy['symbol'],
            order_side,
            strategy['size'],
            strategy['leverage'],
            strategy['stop_loss'],
            strategy['take_profit'],
            strategy['trailing_stop'],
            strategy['trailing_take_profit'],
        )

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÉ‡∏ô RiskGuardian
        self.risk_guardian.total_trades += 1
        if profit < 0:
            self.risk_guardian.failed_trades += 1

        return profit

# ===============================================
# config.py
# ไฟล์ตั้งค่า CONFIG กลาง ใช้ร่วมกันทุกคลาส
# สามารถดึงค่าหรือแก้ไขค่าได้แบบเรียลไทม์
# ===============================================

import json
import logging

# ตั้งค่า logger สำหรับ config (optional, เพื่อ log การเปลี่ยนแปลงค่า)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class GlobalConfig:
    """
    คลาสจัดการ CONFIG กลางของระบบ
    การใช้งาน:
    - ดึงค่า: GlobalConfig.get('key')
    - เปลี่ยนค่า: GlobalConfig.set('key', new_value)
    - โหลดจากไฟล์: GlobalConfig.load_from_file('path/to/config.json')
    """
    CONFIG = {
        # ===============================
        # Trading and Risk Management Parameters
        # พารามิเตอร์การเทรดและการบริหารความเสี่ยง
        # ===============================
        'profit_lock_percentage': 0.05,        # เปอร์เซ็นต์กำไรที่ล็อกเมื่อถึงเป้า (เช่น ล็อกกำไรที่ 5%)
        'loss_strategy': 'dynamic',            # กลยุทธ์ตัดขาดทุน ('dynamic' = ปรับตาม ATR เพื่อความยืดหยุ่นตามตลาด)
        'stop_loss_percentage': 0.005,         # เปอร์เซ็นต์ขาดทุนเริ่มต้น (เช่น 0.5% สำหรับ stop loss เริ่มต้น, ปรับตามกลยุทธ์)
        'cut_loss_threshold': 0.2,             # ขีดจำกัดขาดทุนสูงสุด (เป็น fraction เช่น 20% ของทุน)
        'risk_per_trade': 0.2,                 # ความเสี่ยงต่อการเทรดแต่ละครั้ง (เช่น 20% ของทุน, ปรับตาม KPI เพื่อควบคุม drawdown)
        'max_drawdown': 0.2,                   # เปอร์เซ็นต์ drawdown สูงสุดที่ยอมรับได้ (เช่น 20% ของทุนรวม)
        'liquidity_threshold': 1000000,        # ปริมาณการซื้อขายขั้นต่ำ (หน่วย USDT เพื่อให้แน่ใจว่ามี liquidity เพียงพอ)

        # ===============================
        # Financial Management Parameters
        # พารามิเตอร์ด้านการจัดการการเงิน
        # ===============================
        'initial_balance': 100,               # ยอดเงินเริ่มต้นในบัญชี (หน่วย USDT, ใช้สำหรับการคำนวณ reward และ reinvest)
        'reinvest_profits': True,             # True = นำกำไรมา reinvest เพื่อทบต้นทุน, False = ไม่ reinvest (เก็บกำไรแยก)

        # ===============================
        # Simulation Mode Parameters
        # พารามิเตอร์สำหรับโหมดจำลอง (dry_run)
        # ===============================
        'sim_volatility': 0.02,              # ความผันผวนในโหมดจำลอง (เช่น 2% สำหรับการสุ่มราคา)
        'sim_trend': 0.001,                  # แนวโน้มราคาในโหมดจำลอง (เช่น 0.1% ต่อ step สำหรับการจำลอง uptrend/downtrend)
        'sim_spike_chance': 0.05,            # โอกาสเกิดการพุ่งของราคาในโหมดจำลอง (เช่น 5% โอกาส spike)

        # ===============================
        # Model Training and Optimization Parameters
        # พารามิเตอร์ฝึกโมเดล AI และการปรับแต่ง
        # ===============================
        'auto_ml_interval': 500,             # จำนวน steps ก่อนฝึก ML อัตโนมัติ (เช่น ทุก 500 steps เพื่อปรับ hyperparameter)
        'rl_train_interval': 200,            # จำนวน steps ก่อนฝึก Reinforcement Learning (เช่น ทุก 200 steps เพื่ออัพเดท policy)
        'checkpoint_interval': 360,          # จำนวน steps ก่อนบันทึก checkpoint (เช่น ทุก 360 steps หรือ 6 ชั่วโมง)
        'bayes_opt_steps': 10,              # จำนวน iterations สำหรับ Bayesian Optimization (เพื่อหา hyperparameter ที่ดีที่สุด)
        'gnn_update_interval': 900,          # วินาทีที่อัพเดท GNN graph (เช่น ทุก 15 นาที เพื่อวิเคราะห์ความสัมพันธ์เหรียญ)
        'madrl_agent_count': 50,            # จำนวน agent สูงสุดใน MADRL (ตามจำนวนเหรียญที่เทรด เพื่อจัดการ multi-agent)
        'max_coins_per_trade': 15,          # จำนวนเหรียญสูงสุดที่เทรดพร้อมกัน (เพื่อจำกัด portfolio size)
        'min_coins_per_trade': 6,           # จำนวนเหรียญขั้นต่ำที่เทรดพร้อมกัน (เพื่อกระจายความเสี่ยง)
        'maml_lr_inner': 0.01,              # Learning rate ภายในสำหรับ MAML (เพื่อ fine-tuning รวดเร็ว)
        'maml_lr_outer': 0.001,             # Learning rate ภายนอกสำหรับ MAML (เพื่ออัพเดท meta-model)
        'maml_steps': 5,                    # จำนวน steps สำหรับ fine-tuning ใน MAML (เพื่อการเรียนรู้แบบ few-shot)

        # ===============================
        # KPI and Performance Parameters
        # พารามิเตอร์เกี่ยวกับ KPI และประสิทธิภาพ
        # ===============================
        'target_kpi_daily': 100000.0,       # เป้าหมายกำไรรายวัน (หน่วย USDT, เพื่อวัดประสิทธิภาพระบบ)
        'min_daily_kpi': 50000.0,          # เป้าหมายกำไรขั้นต่ำระหว่างวัน (50% ของ target เพื่อ trigger การปรับกลยุทธ์)

        # ===============================
        # Resource and Bug Management Parameters
        # พารามิเตอร์การจัดการทรัพยากรและบั๊ก
        # ===============================
        'auto_bug_fix': True,              # True = แก้บั๊กอัตโนมัติเมื่อเกิดข้อผิดพลาด (เช่น CUDA OOM หรือ rate limit)
        'bug_fix_attempts': 5,            # จำนวนครั้งสูงสุดที่พยายามแก้บั๊ก (ก่อนหยุดระบบ)
        'resource_adaptive': True,        # True = ปรับการใช้ทรัพยากร (CPU/RAM) อัตโนมัติ (เพื่อป้องกัน overload)
        'min_ram_reserve_mb': 1024,      # จำนวน MB ของ RAM ที่สำรองไว้ (เพื่อป้องกัน memory error)
        'min_cpu_idle_percent': 20,      # เปอร์เซ็นต์ CPU ว่างขั้นต่ำ (เพื่อป้องกัน CPU overload)

        # ===============================
        # API and Miscellaneous Parameters
        # พารามิเตอร์ API และอื่น ๆ
        # ===============================
        'futures_weight': 0.9,            # น้ำหนักการใช้งาน API สำหรับ Futures (เพื่อ allocate rate limit)

        # ===============================
        # System Status and Logging
        # พารามิเตอร์เกี่ยวกับสถานะระบบและการบันทึก
        # ===============================
        'system_running': False,        # สถานะการรันระบบ (True = ทำงาน, False = หยุด)
        'trade_log_file': 'trade_log.xlsx',  # ไฟล์บันทึกการเทรด (สำหรับบันทึก transaction history)
    }

    @classmethod
    def get(cls, key: str, default=None):
        """
        ดึงค่าจาก CONFIG
        :param key: str → ชื่อคีย์ที่ต้องการดึงค่า
        :param default: ค่าเริ่มต้น ถ้าไม่พบ key
        :return: ค่าของ key หรือ default ถ้าไม่พบ
        """
        return cls.CONFIG.get(key, default)

    @classmethod
    def set(cls, key: str, value):
        """
        เปลี่ยนค่าของ CONFIG แบบเรียลไทม์ พร้อม validation พื้นฐาน
        :param key: str → ชื่อคีย์ที่ต้องการแก้ไข
        :param value: ค่าใหม่ที่ต้องการตั้ง
        :raises ValueError: ถ้าค่าใหม่ไม่ถูกต้อง (เช่น ค่าตัวเลข < 0)
        """
        if key in cls.CONFIG:
            # Validation พื้นฐาน: สำหรับค่าตัวเลข ต้อง >= 0
            if isinstance(value, (int, float)) and value < 0:
                raise ValueError(f"ค่า {key} ต้องมากกว่าหรือเท่ากับ 0")
            # สำหรับ boolean ต้องเป็น True/False
            if isinstance(cls.CONFIG[key], bool) and not isinstance(value, bool):
                raise ValueError(f"ค่า {key} ต้องเป็น boolean (True/False)")
            cls.CONFIG[key] = value
            logging.info(f"อัพเดท {key} เป็น {value}")
        else:
            raise KeyError(f"ไม่พบ key '{key}' ใน CONFIG")

    @classmethod
    def load_from_file(cls, file_path: str):
        """
        โหลด CONFIG จากไฟล์ JSON (สำหรับ override ค่าในอนาคต)
        :param file_path: str → เส้นทางไฟล์ JSON
        :raises FileNotFoundError: ถ้าไม่พบไฟล์
        :raises ValueError: ถ้าไฟล์ไม่ใช่ JSON ที่ถูกต้อง
        """
        try:
            with open(file_path, 'r') as f:
                new_config = json.load(f)
            for key, value in new_config.items():
                cls.set(key, value)  # ใช้ method set เพื่อ validate
            logging.info(f"โหลด CONFIG จาก {file_path} สำเร็จ")
        except FileNotFoundError:
            raise FileNotFoundError(f"ไม่พบไฟล์ {file_path}")
        except json.JSONDecodeError:
            raise ValueError(f"ไฟล์ {file_path} ไม่ใช่ JSON ที่ถูกต้อง")
